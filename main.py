import telebot
import requests
from telebot import types

import config


bot = telebot.TeleBot(config.token)


def create_buttons():
    """ Create "–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤üëï", "–ö–æ—Ä–∑–∏–Ω–∞üìã", "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏üëïüëñüëü" buttons on the panel
    """
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item_list = types.KeyboardButton('–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤üëï')
    cart = types.KeyboardButton('–ö–æ—Ä–∑–∏–Ω–∞üìã')
    categories = types.KeyboardButton('–ö–∞—Ç–µ–≥–æ—Ä–∏–∏üëïüëñüëü')
    markup.row(item_list, cart, categories)
    return markup


def create_inline_button(item):
    """ Create inline button under the message (add to cart, delete from cart)
    """
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
    markup = types.InlineKeyboardMarkup(row_width=2)
    add_to_cart = types.InlineKeyboardButton('–í –∫–æ—Ä–∑–∏–Ω—É ‚úî', callback_data=f"add_{item['id']}")
    remove_from_cart = types.InlineKeyboardButton('–£–±—Ä–∞—Ç—å –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã ‚ùå', callback_data=f"del_{item['id']}")
    markup.add(add_to_cart, remove_from_cart)
    return markup


def get_item_list(message, response):
    """ Get item list (all and by categories)
    """
    for item in response:
        if item['discount_price']:
            mess = f"<b>{item['title']}</b> - {item['discount_price']}$. Old price - {item['price']}$."
        else:
            mess = f"<b>{item['title']}</b> - {item['price']}$."
        bot.send_message(message.from_user.id, mess, reply_markup=create_inline_button(item), parse_mode='html')


@bot.message_handler(commands=['start'])
def handle_text(message):
    """ Hello message and create bottom buttons
    """
    bot.send_message(message.from_user.id, 'Hi! You are in ecommerce website.', reply_markup=create_buttons())


@bot.message_handler(commands=['login'])
def handle_text(message):
    """ Instruction for authorization
    """
    mess = '<b>–î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ —Å–ª–µ–¥—É—â–µ–π —Ñ–æ—Ä–º–µ:</b>\nlogin:\nusername\npassword'
    bot.send_message(message.from_user.id, mess, reply_markup=create_buttons(), parse_mode='html')


@bot.message_handler(content_types=['text'])
def handle_text(message):
    """ Handling text messages (login, –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤üëï, –ö–æ—Ä–∑–∏–Ω–∞üìã, –ö–∞—Ç–µ–≥–æ—Ä–∏–∏üëïüëñüëü, –ö–∞—Ç–µ–≥–æ—Ä–∏—è id)
    """
    # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    if message.text[:6] == 'login:':
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
            data = message.text[7:].split('\n')
            login = data[0]
            password = data[1]
            response = requests.post('http://127.0.0.1:8000/auth/token/login/', data={
                'username': f'{login}',
                'password': f'{password}'
            }).json()
            auth_token = response['auth_token']

            # –ó–∞–ø–∏—Å—å —Ç–æ–∫–µ–Ω–∞ –≤ —Ñ–∞–π–ª
            f = open(f'auth_token.txt', 'w')
            f.write(auth_token)
            f.close()

            # –°–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—Ö–æ–¥–µ
            mess = f"–í—ã–ø–æ–ª–Ω–µ–Ω –≤—Ö–æ–¥ –ø–æ–¥ –∏–º–µ–Ω–µ–º {login}"
            bot.send_message(message.from_user.id, mess, reply_markup=create_buttons(), parse_mode='html')

        except Exception as e:
            bot.send_message(message.from_user.id, f"–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")

    # –í—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤
    if message.text == '–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤üëï':
        start_message = '<u>You can choose these products:\n</u>'

        bot.send_message(message.from_user.id, start_message, reply_markup=create_buttons(), parse_mode='html')

        # –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
        url = config.url + 'items/'
        response = requests.get(url).json()
        get_item_list(message, response)

    # –ö–æ—Ä–∑–∏–Ω–∞
    if message.text == '–ö–æ—Ä–∑–∏–Ω–∞üìã':
        url = config.url + 'cart/'

        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏–∑ —Ñ–∞–π–ª–∞
        file = open('auth_token.txt')
        auth_token = file.read()

        response = requests.get(url, headers={'Authorization': f'Token {auth_token}'}).json()

        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ
        try:
            mess = 'ITEMS IN YOUR CART:\n'
            for item in response[0]['items']:
                mess += f"{response[0]['items'].index(item)+1}. <b>{item['item']}</b> - {item['quantity']}—à—Ç.\n"
            mess += f"======================================" \
                f"\n<b>Order summary:</b> {response[0]['total_order_amount']} $"
        except Exception:
            mess = '–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.'

        bot.send_message(message.from_user.id, mess, reply_markup=create_buttons(), parse_mode='html')

    # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
    if message.text == '–ö–∞—Ç–µ–≥–æ—Ä–∏–∏üëïüëñüëü':
        url = config.url + 'items/categories/'
        response = requests.get(url).json()
        mess = '<b>Categories:</b>\n\n'
        for c in response:
            mess += f"{c['id']}. {c['title']} ({c['items_count']} items)\n"

        cat_1 = types.KeyboardButton('–ö–∞—Ç–µ–≥–æ—Ä–∏—è 1')
        cat_2 = types.KeyboardButton('–ö–∞—Ç–µ–≥–æ—Ä–∏—è 2')
        cat_3 = types.KeyboardButton('–ö–∞—Ç–µ–≥–æ—Ä–∏—è 3')
        cat_4 = types.KeyboardButton('–ö–∞—Ç–µ–≥–æ—Ä–∏—è 4')
        cat_5 = types.KeyboardButton('–ö–∞—Ç–µ–≥–æ—Ä–∏—è 5')
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(cat_1, cat_2, cat_3, cat_4, cat_5)

        bot.send_message(message.from_user.id, mess, reply_markup=markup, parse_mode='html')

    # –í—ã–≤–æ–¥ –æ–¥–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if message.text[:9] == '–∫–∞—Ç–µ–≥–æ—Ä–∏—è' or message.text[:9] == '–ö–∞—Ç–µ–≥–æ—Ä–∏—è':
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –æ–¥–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        try:
            category_id = message.text[-1]
            url = config.url + f"items/categories/{category_id}/"
            response = requests.get(url).json()

            mess = f"<b>Items in category \"{response['title']}\":</b>\n\n"
            bot.send_message(message.from_user.id, mess, reply_markup=create_buttons(), parse_mode='html')

            get_item_list(message, response['category_items'])
        except Exception:
            mess = f"<b>Wrong category number! Choose one from category list.</b>\n"
            bot.send_message(message.from_user.id, mess, reply_markup=create_buttons(), parse_mode='html')


@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    """ Handling messages from inline keyboard (add to cart, delete from cart)
    """
    if call.message:

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–æ—Ä–∑–∏–Ω—É
        if call.data[:3] == 'add':
            url = config.url + f"cart/{call.data[4:]}/"

            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏–∑ —Ñ–∞–π–ª–∞
            file = open('auth_token.txt')
            auth_token = file.read()

            response = requests.post(url, headers={'Authorization': f'Token {auth_token}'})
            bot.send_message(call.message.chat.id, 'Item has been added to the cart ‚úÖ')

        # –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
        if call.data[:3] == 'del':
            url = config.url + f"cart/remove/{call.data[4:]}/"

            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏–∑ —Ñ–∞–π–ª–∞
            file = open('auth_token.txt')
            auth_token = file.read()

            response = requests.delete(url, headers={'Authorization': f'Token {auth_token}'})
            bot.send_message(call.message.chat.id, 'Item has been removed from the cart ‚ùå')


bot.polling(none_stop=True)

